//**** 初回起動 ****************************************************************************
//---- OnFirstBoot事件 ------------------------------------------------------------------
OnFirstBoot
{
	//加入项目时程变量
	schedule_month			= "1,1"
	schedule_day			= "1,1"
	schedule_event			= "事件A,事件B"

	//---- 變數初期化
	username			= "USER"
	userbirthday			= "未知"
	stroke				= 0		// 撫摸判定用
	teachusername			= 0		// 記住user名用
	teachuserbirthday		= 0		// 記住user生日用
	mikireflag			= 0		// 見切處理用
	intimacy			= 0		// 親密度設定
	GhostFirstBoot			= GETSECCOUNT();
	GhostLastBoot			= CurrentTime; 
	otherghosttalkswitch		= "1"		// 與他人格對話
	lastTalk			= ""		//避免剛啓動就出0
	//繁簡轉換什麽的……
	fjswitch			= 0		//默認為不轉
	//整點時報開關
	sbswitch			= 0		//默認為開啟
	//爲了提高適應性而進行的改變……
	shell.name 			="master"
	//---- 透過檢查Vanish次數來判定是否為真的初回起動
	if reference0 == 0
	{
		//---- 初回起動
		"\t\0\s[0]這個是初次啟動事件。\w9\w9\n\n/
		\1\s[10]請在輸入框中輸入用戶名。\![open,inputbox,TeachUsernameFirst,-1]\e"
	}
	else
	{
		//刪除過
		"\t\0\s[0]這是刪除過結果又安裝了的初次啟動事件。\w9\w9\n\n/
		\1\s[10]所以省略輸入用戶名的事情。\e"
	}
}
Input.TeachUsernameFirst
{
	if reference1 == ""
	{
		"\0\s[0]輸入的用戶名為空的對話。\w9\w9\n\n/
		\1\s[10]保持默認的用戶名USER。\e:chain=first"
	}
	else
	{
		username = "%(reference1)"
		"\0\s[0]輸入的內容為%(username)。\w9\w9\n/
		\1\s[10]用戶名變更為%(username)。\e:chain=first"
	}
}
//**** 通常起動 ***********************************************************************************

//---- OnBoot事件 -----------------------------------------------------------------------
GetSMonth : sequential
{
	_r	= FOPEN("var/SMonth.txt","r");
	_Month	= FREAD("var/SMonth.txt");
	_i	= FCLOSE("var/SMonth.txt");
	_Month	= SPLIT(_Month,",");
	_Month;
}

GetSDay : sequential
{
	_r	= FOPEN("var/SDay.txt","r");
	_Day	= FREAD("var/SDay.txt");
	_i	= FCLOSE("var/SDay.txt");
	_Day	= SPLIT(_Day,",");
	_Day;
}

GetSEvent : sequential
{
	_r	= FOPEN("var/SEvent.txt","r");
	_Event	= FREAD("var/SEvent.txt");
	_i	= FCLOSE("var/SEvent.txt");
	_Event	= SPLIT(_Event,",");
	_Event;
}

OnBoot
{
	//加入项目时程变量
	schedule_month			= GetSMonth
	schedule_day			= GetSDay
	schedule_event			= GetSEvent

	GhostLastBoot			= CurrentTime; 
	CurrentTime			= GETSECCOUNT();
	lastTalk			= ""	//避免剛啓動就出0
	CHAIN.IDName			= ""
	//---- 首先是顯示兩側

	"\0\s[0]\1\s[10]"
	--
	//---- 根據起動的時間產生不同的對話
	_timeslot = GetTimeSlot
	if _timeslot == "用戶生日"
	{
		"\0\s[0]%(username)生日當天啟動發生的對話。\w9\w9\n\n/
		\1\s[10]因為沒有寫，\w9所以就當做已經說過了吧。\e"
	}
	elseif _timeslot == "情人節"
	{
		"\0\s[0]情人節當天啟動發生的對話。\w9\w9\n\n/
		\1\s[10]因為沒有寫，\w9所以就當做已經說過了吧。\e"
	}
	elseif _timeslot == "白色情人節"
	{
		"\0\s[0]白色情人節當天啟動發生的對話。\w9\w9\n\n/
		\1\s[10]因為沒有寫，\w9所以就當做已經說過了吧。\e"
	}
	elseif _timeslot == "聖誕節前夜"
	{
		"\0\s[0]聖誕夜（12月24日）當天啟動發生的對話。\w9\w9\n\n/
		\1\s[10]因為沒有寫，\w9所以就當做已經說過了吧。\e"
	}
	elseif _timeslot == "聖誕節"
	{
		"\0\s[0]聖誕節當天啟動發生的對話。\w9\w9\n\n/
		\1\s[10]因為沒有寫，\w9所以就當做已經說過了吧。\e"
	}
	elseif _timeslot == "Earlymorning"
	{
		"\0\s[0]早上4點到7點啟動發生的對話。\w9\w9\n\n/
		\1\s[10]因為沒有寫，\w9所以就當做已經說過了吧。\e"
	}
	elseif _timeslot == "Morning"
	{
		"\0\s[0]早上8點到9點啟動發生的對話。\w9\w9\n\n/
		\1\s[10]因為沒有寫，\w9所以就當做已經說過了吧。\e"
	}
	elseif _timeslot == "Noon"
	{
		"\0\s[0]早上10點到12點啟動發生的對話。\w9\w9\n\n/
		\1\s[10]因為沒有寫，\w9所以就當做已經說過了吧。\e"
	}
	elseif _timeslot == "Afternoon"
	{
		"\0\s[0]下午13點到16點啟動發生的對話。\w9\w9\n\n/
		\1\s[10]因為沒有寫，\w9所以就當做已經說過了吧。\e"
	}
	elseif _timeslot == "Evening"
	{
		"\0\s[0]下午17點到20點啟動發生的對話。\w9\w9\n\n/
		\1\s[10]因為沒有寫，\w9所以就當做已經說過了吧。\e"
	}
	elseif _timeslot == "Night"
	{
		"\0\s[0]下午21點到23點啟動發生的對話。\w9\w9\n\n/
		\1\s[10]因為沒有寫，\w9所以就當做已經說過了吧。\e"
	}
	else
	{
		"\0\s[0]晚上0點到早上3點啟動發生的對話。\w9\w9\n\n/
		\1\s[10]因為沒有寫，\w9所以就當做已經說過了吧。\e"
	}
}

//**** 時間帯判定 **********************************************************************
GetTimeSlot
{
	if userbirthday[1] == month && userbirthday[2] == day
    	{
    		"用戶生日"
   	 }
	elseif month == 2 && day == 14
	{
		"情人節"
	}
	elseif month == 3 && day == 14
	{
		"白色情人節"
	}
	elseif month == 12 && day == 24
	{
		"聖誕節前夜"
	}
	elseif month == 12 && day == 25
	{
		"聖誕節"
	}
	elseif hour >= 4 && hour <= 7
	{
		"Earlymorning"
	}
	elseif hour >= 8 && hour <= 9
	{	
		"Morning"
	}
	elseif hour >= 10 && hour <= 12
	{
		"Noon"
	}
	elseif hour >= 13 && hour <= 16
	{
		"Afternoon"
	}
	elseif hour >= 17 && hour <= 20
	{
		"Evening"
	}
	elseif hour >= 21 && hour <= 23
	{
		"Night"
	}
	else
	{
		"Midnight"
	}
}
GetTimeSlot2
{
	if hour >= 4 && hour <= 7
	{
		"Earlymorning"
	}
	elseif hour >= 8 && hour <= 9
	{	
		"Morning"
	}
	elseif hour >= 10 && hour <= 12
	{
		"Noon"
	}
	elseif hour >= 13 && hour <= 16
	{
		"Afternoon"
	}
	elseif hour >= 17 && hour <= 20
	{
		"Evening"
	}
	elseif hour >= 21 && hour <= 23
	{
		"Night"
	}
	else
	{
		"Midnight"
	}
}
//项目时称检查
GetTimeSlot3 : sequential
{
	_timeslot="今日无事";
	_size=ARRAYSIZE(schedule_day);
	for i=0;i<_size;i++
	{	
		//"\0\s[0]%(schedule_month[i])\n%(schedule_day[i])\n%(schedule_event[i])\e"
        	if month == schedule_month[i] && day == schedule_day[i]
		{
			_timeslot=schedule_event[i];
		}
        }
	_timeslot;
}

//**** 終了 *********************************************************************************
//---- OnClose事件 ----------------------------------------------------------------------
OnClose
{
	_timeslot = GetTimeSlot2
	case _timeslot
	{
		when "Earlymorning"
		{
			"\0\s[0]早上4點到7點關閉發生的對話。\w9\w9\n\n/
			\1\s[10]因為沒有寫，\w9所以就當做已經說過了吧。"
		}
		when "Morning"
		{
			"\0\s[0]早上8點到10點關閉發生的對話。\w9\w9\n\n/
			\1\s[10]因為沒有寫，\w9所以就當做已經說過了吧。"
		}
		when "Noon"
		{
			"\0\s[0]早上10點到12點關閉發生的對話。\w9\w9\n\n/
			\1\s[10]因為沒有寫，\w9所以就當做已經說過了吧。"
		}
		when "Afternoon"
		{
			"\0\s[0]下午13點到16關閉發生的對話。\w9\w9\n\n/
			\1\s[10]因為沒有寫，\w9所以就當做已經說過了吧。"
		}
		when "Evening"
		{
			"\0\s[0]下午17點到20點關閉發生的對話。\w9\w9\n\n/
			\1\s[10]因為沒有寫，\w9所以就當做已經說過了吧。"
		}
		when "Night"
		{
			"\0\s[0]晚上21點到23點關閉發生的對話。\w9\w9\n\n/
			\1\s[10]因為沒有寫，\w9所以就當做已經說過了吧。"
		}
		others
		{
			"\0\s[0]晚上14點到早上3點關閉發生的對話。\w9\w9\n\n/
			\1\s[10]因為沒有寫，\w9所以就當做已經說過了吧。"
		}
	}
	--
	"\w9\w9\-\e"
}

//**** 最小化還原 *********************************************************************************

//---- OnWindowStateRestore事件 ---------------------------------------------------------
OnWindowStateRestore
{
	_timeslot = GetTimeSlot3;
	"\0\s[0]從最小化復原的對話。\n今天的项目时程点：\n%(_timeslot)\e"
}


//**** GHOST/SHELL變換 ****************************************************************************

//---- 切換至別的GHOST ------------------------------------------------------------------
OnGhostChanging
{
	if reference0 == "殼"
	{"\0\s[0]重新載入人格的對話。\w9\w9\e"
	}
	elseif reference1 == "manual"
	{
		//---- 手動切換
		ChangeToOthers
	}
	else
	{
		//---- 自動切換
		"\0\s[0]自動切換到人格%(reference0)。\1\s[10]\w9\w9\e"
	}
}

//---- 切換自別的GHOST ------------------------------------------------------------------
OnGhostChanged
{
	GhostLastBoot			= CurrentTime; 
	CurrentTime			= GETSECCOUNT();
	lastTalk			= ""	//避免剛啓動就出0
	CHAIN.IDName			=""
	if reference0 == "殼"
	{
		//---- 重新啟動完成
		"\0\s[0]重新啟動完成的對話。\1\s[10]\e"
	}
	else
	{
	//從其他人格切換而來
	ChangeFromOthers
	}
}

//---关机的时候，如果尚未關閉人格
OnCloseAll
{
	if reference0 == 'shutdown' 
	{
		"\1\s[10]\0\s[0]電腦關機事件。\w9\w9\-\e"
	}
}

